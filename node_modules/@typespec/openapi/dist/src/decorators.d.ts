import { DecoratorContext, Model, Operation, Program, Type, TypeSpecValue } from "@typespec/compiler";
import { ExtensionKey } from "./types.js";
export declare const namespace = "OpenAPI";
/**
 * Set a specific operation ID.
 * @param context Decorator Context
 * @param entity Decorator target
 * @param opId Operation ID.
 */
export declare function $operationId(context: DecoratorContext, entity: Operation, opId: string): void;
/**
 * @returns operationId set via the @operationId decorator or `undefined`
 */
export declare function getOperationId(program: Program, entity: Operation): string | undefined;
export declare function $extension(context: DecoratorContext, entity: Type, extensionName: string, value: TypeSpecValue): void;
export declare function setExtension(program: Program, entity: Type, extensionName: ExtensionKey, data: unknown): void;
export declare function getExtensions(program: Program, entity: Type): ReadonlyMap<ExtensionKey, any>;
export declare function $defaultResponse(context: DecoratorContext, entity: Model): void;
/**
 * Check if the given model has been mark as a default response.
 * @param program TypeSpec Program
 * @param entity Model to check.
 * @returns boolean.
 */
export declare function isDefaultResponse(program: Program, entity: Type): boolean;
export interface ExternalDocs {
    url: string;
    description?: string;
}
/**
 * Allows referencing an external resource for extended documentation.
 * @param url The URL for the target documentation. Value MUST be in the format of a URL.
 * @param @optional description A short description of the target documentation.
 */
export declare function $externalDocs(context: DecoratorContext, target: Type, url: string, description?: string): void;
export declare function getExternalDocs(program: Program, entity: Type): ExternalDocs | undefined;
//# sourceMappingURL=decorators.d.ts.map