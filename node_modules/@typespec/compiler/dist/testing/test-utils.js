import { resolvePath } from "../core/index.js";
import { StandardTestLibrary } from "./test-host.js";
/**
 * Define a test library defaulting to the most common library structure.
 * @param init Library configuration.
 * @returns TypeSpec Test library.
 */
export function createTestLibrary(init) {
    var _a, _b;
    const { name } = init;
    const typespecFileFolder = (_a = init.typespecFileFolder) !== null && _a !== void 0 ? _a : "lib";
    const jsFileFolder = (_b = init.jsFileFolder) !== null && _b !== void 0 ? _b : "dist/src";
    return {
        name,
        packageRoot: init.packageRoot,
        files: [
            { realDir: "", pattern: "package.json", virtualPath: `./node_modules/${name}` },
            {
                realDir: typespecFileFolder,
                pattern: "*.tsp",
                virtualPath: resolvePath(`./node_modules/${name}`, typespecFileFolder),
            },
            {
                realDir: jsFileFolder,
                pattern: "**/*.js",
                virtualPath: resolvePath(`./node_modules/${name}`, jsFileFolder),
            },
        ],
    };
}
export function createTestWrapper(host, testWrapperOptions = {}) {
    const { autoImports, autoUsings, wrapper, compilerOptions: defaultCompilerOptions, } = testWrapperOptions;
    const autoCode = [
        ...(autoImports !== null && autoImports !== void 0 ? autoImports : host.libraries.filter((x) => x !== StandardTestLibrary).map((x) => x.name)).map((x) => `import "${x}";`),
        ...(autoUsings !== null && autoUsings !== void 0 ? autoUsings : []).map((x) => `using ${x};`),
    ].join("\n");
    const wrap = (code) => {
        return `${autoCode}${wrapper ? wrapper(code) : code}`;
    };
    return {
        get program() {
            return host.program;
        },
        fs: host.fs,
        autoCodeOffset: autoCode.length,
        compile: (code, options) => {
            host.addTypeSpecFile("./main.tsp", wrap(code));
            return host.compile("./main.tsp", { ...defaultCompilerOptions, ...options });
        },
        diagnose: (code, options) => {
            host.addTypeSpecFile("./main.tsp", wrap(code));
            return host.diagnose("./main.tsp", { ...defaultCompilerOptions, ...options });
        },
        compileAndDiagnose: (code, options) => {
            host.addTypeSpecFile("./main.tsp", wrap(code));
            return host.compileAndDiagnose("./main.tsp", { ...defaultCompilerOptions, ...options });
        },
    };
}
//# sourceMappingURL=test-utils.js.map