import { getSourceLocation } from "../core/diagnostics.js";
import { parse as typespecParse } from "../core/parser.js";
export function parse(text, parsers, opts) {
    const result = typespecParse(text, { comments: true });
    const errors = result.parseDiagnostics.filter((x) => x.severity === "error");
    if (errors.length > 0 && !result.printable) {
        throw new PrettierParserError(errors[0]);
    }
    return result;
}
export class PrettierParserError extends Error {
    constructor(error) {
        var _a, _b;
        super(error.message);
        this.error = error;
        const location = getSourceLocation(error.target);
        this.loc = {
            start: (_a = location === null || location === void 0 ? void 0 : location.pos) !== null && _a !== void 0 ? _a : 0,
            end: (_b = location === null || location === void 0 ? void 0 : location.end) !== null && _b !== void 0 ? _b : 0,
        };
    }
}
//# sourceMappingURL=parser.js.map