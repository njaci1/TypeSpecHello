import { validateDecoratorUniqueOnNode } from "../core/decorator-utils.js";
import { getTypeName } from "../core/index.js";
import { reportDiagnostic } from "../core/messages.js";
const serviceDetailsKey = Symbol.for("@typespec/compiler.services");
function getServiceMap(program) {
    return program.stateMap(serviceDetailsKey);
}
/**
 * List all the services defined in the typespec program
 * @param program Program
 * @returns List of service.
 */
export function listServices(program) {
    return [...getServiceMap(program).values()];
}
/**
 * Get the service information for the given namespace.
 * @param program Program
 * @param namespace Service namespace
 * @returns Service information or undefined if namespace is not a service namespace.
 */
export function getService(program, namespace) {
    return getServiceMap(program).get(namespace);
}
/**
 * Check if the namespace is defined as a service.
 * @param program Program
 * @param namespace Namespace
 * @returns Boolean
 */
export function isService(program, namespace) {
    return getServiceMap(program).has(namespace);
}
/**
 * Mark the given namespace as a service.
 * @param program Program
 * @param namespace Namespace
 * @param details Service details
 */
export function addService(program, namespace, details = {}) {
    var _a;
    const serviceMap = getServiceMap(program);
    const existing = (_a = serviceMap.get(namespace)) !== null && _a !== void 0 ? _a : {};
    serviceMap.set(namespace, { ...existing, ...details, type: namespace });
}
export function $service(context, target, options) {
    var _a, _b;
    validateDecoratorUniqueOnNode(context, target, $service);
    const serviceDetails = {};
    const title = (_a = options === null || options === void 0 ? void 0 : options.properties.get("title")) === null || _a === void 0 ? void 0 : _a.type;
    const version = (_b = options === null || options === void 0 ? void 0 : options.properties.get("version")) === null || _b === void 0 ? void 0 : _b.type;
    if (title) {
        if (title.kind === "String") {
            serviceDetails.title = title.value;
        }
        else {
            reportDiagnostic(context.program, {
                code: "unassignable",
                format: { value: getTypeName(title), targetType: "String" },
                target: context.getArgumentTarget(0),
            });
        }
    }
    if (version) {
        if (version.kind === "String") {
            serviceDetails.version = version.value;
        }
        else {
            reportDiagnostic(context.program, {
                code: "unassignable",
                format: { value: getTypeName(version), targetType: "String" },
                target: context.getArgumentTarget(0),
            });
        }
    }
    addService(context.program, target, serviceDetails);
}
//# sourceMappingURL=service.js.map