var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _StringBuilder_instances, _StringBuilder_placeholders, _StringBuilder_notifyComplete, _StringBuilder_setPlaceholderValue, _StringBuilder_shouldConcatLiteral;
import { Placeholder } from "../placeholder.js";
export class StringBuilder extends Placeholder {
    constructor() {
        super(...arguments);
        _StringBuilder_instances.add(this);
        this.segments = [];
        _StringBuilder_placeholders.set(this, new Set());
    }
    pushLiteralSegment(segment) {
        if (__classPrivateFieldGet(this, _StringBuilder_instances, "m", _StringBuilder_shouldConcatLiteral).call(this)) {
            this.segments[this.segments.length - 1] += segment;
        }
        else {
            this.segments.push(segment);
        }
    }
    pushPlaceholder(ph) {
        __classPrivateFieldGet(this, _StringBuilder_placeholders, "f").add(ph);
        ph.onValue((value) => {
            __classPrivateFieldGet(this, _StringBuilder_instances, "m", _StringBuilder_setPlaceholderValue).call(this, ph, value);
        });
        this.segments.push(ph);
    }
    pushStringBuilder(builder) {
        for (const segment of builder.segments) {
            this.push(segment);
        }
    }
    push(segment) {
        if (typeof segment === "string") {
            this.pushLiteralSegment(segment);
        }
        else if (segment instanceof StringBuilder) {
            this.pushStringBuilder(segment);
        }
        else {
            this.pushPlaceholder(segment);
        }
    }
    reduce() {
        if (__classPrivateFieldGet(this, _StringBuilder_placeholders, "f").size === 0) {
            return this.segments.join("");
        }
        return this;
    }
}
_StringBuilder_placeholders = new WeakMap(), _StringBuilder_instances = new WeakSet(), _StringBuilder_notifyComplete = function _StringBuilder_notifyComplete() {
    const value = this.segments.join("");
    this.setValue(value);
}, _StringBuilder_setPlaceholderValue = function _StringBuilder_setPlaceholderValue(ph, value) {
    for (const [i, segment] of this.segments.entries()) {
        if (segment === ph) {
            this.segments[i] = value;
        }
    }
    __classPrivateFieldGet(this, _StringBuilder_placeholders, "f").delete(ph);
    if (__classPrivateFieldGet(this, _StringBuilder_placeholders, "f").size === 0) {
        __classPrivateFieldGet(this, _StringBuilder_instances, "m", _StringBuilder_notifyComplete).call(this);
    }
}, _StringBuilder_shouldConcatLiteral = function _StringBuilder_shouldConcatLiteral() {
    return this.segments.length > 0 && typeof this.segments[this.segments.length - 1] === "string";
};
export function code(parts, ...substitutions) {
    const builder = new StringBuilder();
    for (const [i, literalPart] of parts.entries()) {
        builder.push(literalPart);
        if (i < substitutions.length) {
            const sub = substitutions[i];
            if (typeof sub === "string") {
                builder.push(sub);
            }
            else if (sub instanceof StringBuilder) {
                builder.pushStringBuilder(sub);
            }
            else if (sub instanceof Placeholder) {
                builder.pushPlaceholder(sub);
            }
            else {
                switch (sub.kind) {
                    case "circular":
                    case "none":
                        builder.pushLiteralSegment("");
                        break;
                    default:
                        builder.push(sub.value);
                }
            }
        }
    }
    return builder.reduce();
}
//# sourceMappingURL=string-builder.js.map