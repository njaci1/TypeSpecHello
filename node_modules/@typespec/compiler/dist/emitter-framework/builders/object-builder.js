import { compilerAssert } from "../../core/index.js";
import { Placeholder } from "../placeholder.js";
import { EmitterResult } from "../types.js";
export class ObjectBuilder {
    constructor(initializer = {}) {
        if (initializer instanceof Placeholder) {
            initializer.onValue((v) => {
                for (const [key, value] of Object.entries(v)) {
                    this.set(key, value);
                }
            });
        }
        else {
            for (const [key, value] of Object.entries(initializer)) {
                this.set(key, value);
            }
        }
    }
    set(key, v) {
        let value = v;
        if (v instanceof EmitterResult) {
            compilerAssert(v.kind !== "circular", "Can't set a circular emit result.");
            if (v.kind === "none") {
                this[key] = null;
                return;
            }
            else {
                value = v.value;
            }
        }
        if (value instanceof Placeholder) {
            value.onValue((v) => {
                this[key] = v;
            });
        }
        this[key] = value;
    }
}
//# sourceMappingURL=object-builder.js.map