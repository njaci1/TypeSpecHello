var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ArrayBuilder_instances, _ArrayBuilder_setPlaceholderValue;
import { compilerAssert } from "../../core/index.js";
import { Placeholder } from "../placeholder.js";
import { EmitterResult } from "../types.js";
export class ArrayBuilder extends Array {
    constructor() {
        super(...arguments);
        _ArrayBuilder_instances.add(this);
    }
    push(...values) {
        for (const v of values) {
            let toPush;
            if (v instanceof EmitterResult) {
                compilerAssert(v.kind !== "circular", "Can't push a circular emit result.");
                if (v.kind === "none") {
                    toPush = null;
                }
                else {
                    toPush = v.value;
                }
            }
            else {
                toPush = v;
            }
            if (toPush instanceof Placeholder) {
                toPush.onValue((v) => __classPrivateFieldGet(this, _ArrayBuilder_instances, "m", _ArrayBuilder_setPlaceholderValue).call(this, toPush, v));
            }
            super.push(toPush);
        }
        return values.length;
    }
}
_ArrayBuilder_instances = new WeakSet(), _ArrayBuilder_setPlaceholderValue = function _ArrayBuilder_setPlaceholderValue(p, value) {
    for (const [i, item] of this.entries()) {
        if (item === p) {
            this[i] = value;
        }
    }
};
//# sourceMappingURL=array-builder.js.map