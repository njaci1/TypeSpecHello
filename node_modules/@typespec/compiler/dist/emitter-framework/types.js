import { Placeholder } from "./placeholder.js";
export class EmitterResult {
}
export class Declaration extends EmitterResult {
    constructor(name, scope, value) {
        if (value instanceof Placeholder) {
            value.onValue((v) => (this.value = v));
        }
        super();
        this.name = name;
        this.scope = scope;
        this.value = value;
        this.kind = "declaration";
    }
}
export class RawCode extends EmitterResult {
    constructor(value) {
        if (value instanceof Placeholder) {
            value.onValue((v) => (this.value = v));
        }
        super();
        this.value = value;
        this.kind = "code";
    }
}
export class NoEmit extends EmitterResult {
    constructor() {
        super(...arguments);
        this.kind = "none";
    }
}
export class CircularEmit extends EmitterResult {
    constructor(emitEntityKey) {
        super();
        this.emitEntityKey = emitEntityKey;
        this.kind = "circular";
    }
}
//# sourceMappingURL=types.js.map