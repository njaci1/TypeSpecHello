import { compilerAssert, SyntaxKind } from "../core/index.js";
import { getDoc } from "../lib/decorators.js";
import { getTypeSignature } from "./type-signature.js";
/**
 * Get the detailed documentation of a type.
 * @param program The program
 */
export function getTypeDetails(program, type, options = {
    includeSignature: true,
    includeParameterTags: true,
}) {
    // BUG: https://github.com/microsoft/typespec/issues/1348
    // We've already resolved to a Type and lost the alias node so we don't show doc comments on aliases or alias signatures, currently.
    var _a, _b;
    if (type.kind === "Intrinsic") {
        return "";
    }
    const lines = [];
    if (options.includeSignature) {
        lines.push(getTypeSignature(type));
    }
    const doc = getTypeDocumentation(program, type);
    if (doc) {
        lines.push(doc);
    }
    for (const doc of (_b = (_a = type === null || type === void 0 ? void 0 : type.node) === null || _a === void 0 ? void 0 : _a.docs) !== null && _b !== void 0 ? _b : []) {
        for (const tag of doc.tags) {
            if (tag.tagName.sv === "param" && !options.includeParameterTags) {
                continue;
            }
            lines.push(
            //prettier-ignore
            `_@${tag.tagName.sv}_${"paramName" in tag ? ` \`${tag.paramName.sv}\`` : ""} â€”\n${getDocContent(tag.content)}`);
        }
    }
    return lines.join("\n\n");
}
function getTypeDocumentation(program, type) {
    var _a, _b;
    const docs = [];
    // Add /** ... */ developer docs
    for (const d of (_b = (_a = type === null || type === void 0 ? void 0 : type.node) === null || _a === void 0 ? void 0 : _a.docs) !== null && _b !== void 0 ? _b : []) {
        docs.push(getDocContent(d.content));
    }
    // Add @doc(...) API docs
    const apiDocs = getDoc(program, type);
    if (apiDocs) {
        docs.push(apiDocs);
    }
    return docs.join("\n\n");
}
export function getParameterDocumentation(program, type) {
    var _a, _b;
    const map = new Map();
    for (const d of (_b = (_a = type === null || type === void 0 ? void 0 : type.node) === null || _a === void 0 ? void 0 : _a.docs) !== null && _b !== void 0 ? _b : []) {
        for (const tag of d.tags) {
            if (tag.kind === SyntaxKind.DocParamTag) {
                map.set(tag.paramName.sv, getDocContent(tag.content));
            }
        }
    }
    return map;
}
function getDocContent(content) {
    const docs = [];
    for (const node of content) {
        compilerAssert(node.kind === SyntaxKind.DocText, "No other doc content node kinds exist yet. Update this code appropriately when more are added.");
        docs.push(node.text);
    }
    return docs.join("");
}
//# sourceMappingURL=type-details.js.map