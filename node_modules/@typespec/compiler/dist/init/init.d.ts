import { CompilerHost } from "../core/types.js";
import { InitTemplate } from "./init-template.js";
interface ScaffoldingConfig extends InitTemplate {
    /**
     * Path where this template was loaded from.
     */
    templateUri: string;
    /**
     * Directory full path where the project should be initialized.
     */
    directory: string;
    /**
     * folder name where the project should be initialized.
     */
    folderName: string;
    /**
     * Name of the project.
     */
    name: string;
    /**
     * List of libraries to include
     */
    libraries: string[];
    /**
     * A flag to indicate not adding @typespec/compiler package to package.json.
     * Other libraries may already brought in the dependency such as Azure template.
     */
    skipCompilerPackage: boolean;
    /**
     * Custom parameters provided in the tempalates.
     */
    parameters: Record<string, any>;
    /**
     * NormalizeVersion function replaces `-` with `_`.
     */
    normalizeVersion: () => (text: string, render: any) => string;
    /**
     * toLowerCase function for template replacement
     */
    toLowerCase: () => (text: string, render: any) => string;
    /**
     * Normalize package name for langauges other than C#. It replaces `.` with `-` and toLowerCase
     */
    normalizePackageName: () => (text: string, render: any) => string;
}
export declare function initTypeSpecProject(host: CompilerHost, directory: string, templatesUrl?: string): Promise<void>;
export declare function scaffoldNewProject(host: CompilerHost, config: ScaffoldingConfig): Promise<void>;
export {};
//# sourceMappingURL=init.d.ts.map