import Ajv from "ajv";
import { compilerAssert } from "./diagnostics.js";
import { NoTarget } from "./types.js";
export function createJSONSchemaValidator(schema, options = {}) {
    const ajv = new Ajv({
        strict: true,
        coerceTypes: options.coerceTypes,
    });
    return { validate };
    function validate(config, target) {
        var _a;
        const validate = ajv.compile(schema);
        const valid = validate(config);
        compilerAssert(!valid || !validate.errors, "There should be errors reported if the schema is not valid.");
        const diagnostics = [];
        for (const error of (_a = validate.errors) !== null && _a !== void 0 ? _a : []) {
            const diagnostic = ajvErrorToDiagnostic(error, target);
            diagnostics.push(diagnostic);
        }
        return diagnostics;
    }
}
const IGNORED_AJV_PARAMS = new Set(["type", "errors"]);
function ajvErrorToDiagnostic(error, target) {
    const messageLines = [`Schema violation: ${error.message} (${error.instancePath || "/"})`];
    for (const [name, value] of Object.entries(error.params).filter(([name]) => !IGNORED_AJV_PARAMS.has(name))) {
        const formattedValue = Array.isArray(value) ? [...new Set(value)].join(", ") : value;
        messageLines.push(`  ${name}: ${formattedValue}`);
    }
    const message = messageLines.join("\n");
    return {
        code: "invalid-schema",
        message,
        severity: "error",
        target: target === NoTarget ? target : { file: target, pos: 0, end: 0 },
    };
}
//# sourceMappingURL=schema-validator.js.map