import { readdir, readFile, realpath, rm, stat, writeFile } from "fs/promises";
import mkdirp from "mkdirp";
import fetch from "node-fetch";
import { fileURLToPath, pathToFileURL } from "url";
import { createSourceFile } from "./diagnostics.js";
import { createConsoleSink } from "./logger/index.js";
import { joinPaths, resolvePath } from "./path-utils.js";
import { getSourceFileKindFromExt } from "./util.js";
/**
 * Implementation of the @see CompilerHost using the real file system.
 * This is the the CompilerHost used by TypeSpec CLI.
 */
export const NodeHost = {
    readUrl: async (url) => {
        const response = await fetch(url);
        const text = await response.text();
        return createSourceFile(text, url);
    },
    readFile: async (path) => createSourceFile(await readFile(path, "utf-8"), path),
    writeFile: (path, content) => writeFile(path, content, { encoding: "utf-8" }),
    readDir: (path) => readdir(path),
    rm: (path, options) => rm(path, options),
    getExecutionRoot: () => resolvePath(fileURLToPath(import.meta.url), "../../../"),
    getJsImport: (path) => import(pathToFileURL(path).href),
    getLibDirs() {
        const rootDir = this.getExecutionRoot();
        return [joinPaths(rootDir, "lib")];
    },
    stat(path) {
        return stat(path);
    },
    realpath(path) {
        return realpath(path);
    },
    getSourceFileKind: getSourceFileKindFromExt,
    logSink: createConsoleSink(),
    mkdirp: (path) => mkdirp(path),
    fileURLToPath,
    pathToFileURL(path) {
        return pathToFileURL(path).href;
    },
};
//# sourceMappingURL=node-host.js.map