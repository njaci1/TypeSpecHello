import { SyntaxKind, } from "./types.js";
export function isErrorType(type) {
    return type.kind === "Intrinsic" && type.name === "ErrorType";
}
export function isVoidType(type) {
    return type.kind === "Intrinsic" && type.name === "void";
}
export function isNeverType(type) {
    return type.kind === "Intrinsic" && type.name === "never";
}
export function isUnknownType(type) {
    return type.kind === "Intrinsic" && type.name === "unknown";
}
export function isNullType(type) {
    return type.kind === "Intrinsic" && type.name === "null";
}
/**
 * Lookup and find the node
 * @param node Node
 * @returns Template Parent node if applicable
 */
export function getParentTemplateNode(node) {
    switch (node.kind) {
        case SyntaxKind.ModelStatement:
        case SyntaxKind.ScalarStatement:
        case SyntaxKind.OperationStatement:
        case SyntaxKind.InterfaceStatement:
            return node.templateParameters.length > 0 ? node : undefined;
        case SyntaxKind.OperationSignatureDeclaration:
        case SyntaxKind.ModelProperty:
        case SyntaxKind.ModelExpression:
            return node.parent ? getParentTemplateNode(node.parent) : undefined;
        default:
            return undefined;
    }
}
/**
 * Check the given type is a finished template instance.
 */
export function isTemplateInstance(type) {
    const maybeTemplateType = type;
    return (maybeTemplateType.templateMapper !== undefined &&
        !maybeTemplateType.templateMapper.partial &&
        maybeTemplateType.isFinished);
}
/**
 * Check if the type is a declared type. This include:
 * - non templated type
 * - template declaration
 */
export function isDeclaredType(type) {
    if (type.node === undefined) {
        return false;
    }
    const node = type.node;
    return (node.templateParameters === undefined || type.templateMapper === undefined);
}
/**
 * Resolve if the type is a template type declaration(Non initialized template type).
 */
export function isTemplateDeclaration(type) {
    if (type.node === undefined) {
        return false;
    }
    const node = type.node;
    return (node.templateParameters &&
        node.templateParameters.length > 0 &&
        type.templateMapper === undefined);
}
/**
 * Resolve if the type was created from a template type or is a template type declaration.
 */
export function isTemplateDeclarationOrInstance(type) {
    if (type.node === undefined) {
        return false;
    }
    const node = type.node;
    return node.templateParameters && node.templateParameters.length > 0;
}
/**
 * Check if the given namespace is the global namespace
 * @param program Program
 * @param namespace Namespace
 * @returns {boolean}
 */
export function isGlobalNamespace(program, namespace) {
    return program.getGlobalNamespaceType() === namespace;
}
/**
 * Check if the given type is declared in the specified namespace or, optionally, its child namespaces.
 * @param type Type
 * @param namespace Namespace
 * @returns {boolean}
 */
export function isDeclaredInNamespace(type, namespace, options = { recursive: true }) {
    let candidateNs = type.namespace;
    while (candidateNs) {
        if (candidateNs === namespace) {
            return true;
        }
        // Operations can be defined inside of an interface that is defined in the
        // desired namespace
        if (type.kind === "Operation" && type.interface && type.interface.namespace === namespace) {
            return true;
        }
        // If we are allowed to check recursively, walk up the namespace hierarchy
        candidateNs = options.recursive ? candidateNs.namespace : undefined;
    }
    return false;
}
//# sourceMappingURL=type-utils.js.map