import { DecoratorContext, Enum, EnumMember, ModelProperty, Namespace, ObjectType, Operation, Program, ProjectionApplication, Type } from "@typespec/compiler";
import { Version, VersionResolution } from "./types.js";
import { TimelineMoment, VersioningTimeline } from "./versioning-timeline.js";
export declare const namespace = "TypeSpec.Versioning";
export declare function $added(context: DecoratorContext, t: Type, v: EnumMember): void;
export declare function $removed(context: DecoratorContext, t: Type, v: EnumMember): void;
/**
 * Returns the mapping of versions to old type values, if applicable
 * @param p TypeSpec program
 * @param t type to query
 * @returns Map of versions to old types, if any
 */
export declare function getTypeChangedFrom(p: Program, t: Type): Map<Version, Type> | undefined;
export declare function $typeChangedFrom(context: DecoratorContext, prop: ModelProperty, v: EnumMember, oldType: any): void;
/**
 * Returns the mapping of versions to old return type values, if applicable
 * @param p TypeSpec program
 * @param t type to query
 * @returns Map of versions to old types, if any
 */
export declare function getReturnTypeChangedFrom(p: Program, t: Type): Map<Version, Type> | undefined;
export declare function $returnTypeChangedFrom(context: DecoratorContext, op: Operation, v: EnumMember, oldReturnType: any): void;
export declare function $renamedFrom(context: DecoratorContext, t: Type, v: EnumMember, oldName: string): void;
export declare function $madeOptional(context: DecoratorContext, t: ModelProperty, v: EnumMember): void;
/**
 * @returns the list of versions for which this decorator has been applied
 */
export declare function getRenamedFromVersions(p: Program, t: Type): Version[] | undefined;
/**
 * @returns get old name if applicable.
 */
export declare function getNameAtVersion(p: Program, t: Type, versionKey: ObjectType): string;
/**
 * @returns get old type if applicable.
 */
export declare function getTypeBeforeVersion(p: Program, t: Type, versionKey: ObjectType): Type | undefined;
/**
 * @returns get old type if applicable.
 */
export declare function getReturnTypeBeforeVersion(p: Program, t: Type, versionKey: ObjectType): any;
export declare function getAddedOnVersions(p: Program, t: Type): Version[] | undefined;
export declare function getRemovedOnVersions(p: Program, t: Type): Version[] | undefined;
/**
 * @returns version when the given type was made optional if applicable.
 */
export declare function getMadeOptionalOn(p: Program, t: Type): Version | undefined;
export declare class VersionMap {
    private map;
    constructor(namespace: Namespace, enumType: Enum);
    getVersionForEnumMember(member: EnumMember): Version | undefined;
    getVersions(): Version[];
    get size(): number;
}
export declare function $versioned(context: DecoratorContext, t: Namespace, versions: Enum): void;
/**
 * Get the version map of the namespace.
 */
export declare function getVersion(program: Program, namespace: Namespace): VersionMap | undefined;
export declare function findVersionedNamespace(program: Program, namespace: Namespace): Namespace | undefined;
export declare function $useDependency(context: DecoratorContext, target: EnumMember | Namespace, ...versionRecords: EnumMember[]): void;
export declare function getUseDependencies(program: Program, target: Namespace | Enum, searchEnum?: boolean): Map<Namespace, Map<Version, Version> | Version> | undefined;
export declare function getVersionDependencies(program: Program, namespace: Namespace): Map<Namespace, Map<Version, Version> | Version> | undefined;
/**
 * Resolve the version to use for all namespace for each of the root namespace versions.
 * @param program
 * @param rootNs Root namespace.
 */
export declare function resolveVersions(program: Program, rootNs: Namespace): VersionResolution[];
/**
 * Represent the set of projections used to project to that version.
 */
interface VersionProjections {
    version: string | undefined;
    projections: ProjectionApplication[];
}
export declare function buildVersionProjections(program: Program, rootNs: Namespace): VersionProjections[];
export declare function getVersionsForEnum(program: Program, en: Enum): [Namespace, VersionMap] | [];
export declare function getVersions(p: Program, t: Type): [Namespace, VersionMap] | [];
export declare enum Availability {
    Unavailable = "Unavailable",
    Added = "Added",
    Available = "Available",
    Removed = "Removed"
}
export declare function getAvailabilityMap(program: Program, type: Type): Map<string, Availability> | undefined;
export declare function getAvailabilityMapInTimeline(program: Program, type: Type, timeline: VersioningTimeline): Map<TimelineMoment, Availability> | undefined;
export declare function existsAtVersion(p: Program, type: Type, versionKey: ObjectType): boolean;
export declare function hasDifferentNameAtVersion(p: Program, type: Type, version: ObjectType): boolean;
export declare function madeOptionalAfter(program: Program, type: Type, versionKey: ObjectType): boolean;
export declare function hasDifferentTypeAtVersion(p: Program, type: Type, version: ObjectType): boolean;
export declare function hasDifferentReturnTypeAtVersion(p: Program, type: Type, version: ObjectType): boolean;
export declare function getVersionForEnumMember(program: Program, member: EnumMember): Version | undefined;
export {};
//# sourceMappingURL=versioning.d.ts.map